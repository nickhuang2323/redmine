# Generated by Copilot
"""
Git History 服務實現
處理 git commit history 分析和 issue 編號提取
"""
import subprocess
import re
from typing import List, Set, Optional
from pathlib import Path
from dataclasses import dataclass


@dataclass
class GitCommit:
    """Git commit 資訊"""
    hash: str
    message: str
    author: str
    date: str
    issue_numbers: List[str]


class GitHistoryExtractor:
    """Git history 提取器"""
    
    def __init__(self, repo_path: str = "."):
        """
        初始化 Git history 提取器
        
        Args:
            repo_path: Git 儲存庫路徑，預設為當前目錄
        """
        self._repo_path = Path(repo_path).resolve()
        
    def extract_issue_numbers_from_file(self, file_path: str, pattern: str = r"refs\s+#(\d+)") -> str:
        """
        從指定檔案的 git history 中提取符合 refs #00000 格式的 issue 編號
        
        Args:
            file_path: 檔案路徑
            pattern: 正規表達式模式，預設為 "refs #數字"
            
        Returns:
            逗號分隔的 issue 編號字串，例如 "12345,12346,12347"
        """
        try:
            # 檢查檔案是否存在
            full_path = self._repo_path / file_path
            if not full_path.exists():
                print(f"❌ 檔案不存在: {full_path}")
                return ""
                
            # 取得檔案的 git log
            commits = self._get_file_commits(file_path)
            
            # 提取 issue 編號
            issue_numbers = self._extract_issue_numbers_from_commits(commits, pattern)
            
            # 回傳逗號分隔的字串
            return ",".join(sorted(issue_numbers))
            
        except Exception as e:
            print(f"❌ 提取 git history 失敗: {e}")
            return ""
    
    def get_file_commit_history(self, file_path: str) -> List[GitCommit]:
        """
        取得指定檔案的完整 commit history
        
        Args:
            file_path: 檔案路徑
            
        Returns:
            GitCommit 物件列表
        """
        try:
            commits = self._get_file_commits(file_path)
            git_commits = []
            
            for commit in commits:
                # 提取 issue 編號
                issue_numbers = self._extract_issue_numbers_from_commits([commit])
                
                git_commit = GitCommit(
                    hash=commit.get('hash', ''),
                    message=commit.get('message', ''),
                    author=commit.get('author', ''),
                    date=commit.get('date', ''),
                    issue_numbers=list(issue_numbers)
                )
                git_commits.append(git_commit)
                
            return git_commits
            
        except Exception as e:
            print(f"❌ 取得 commit history 失敗: {e}")
            return []
    
    def _get_file_commits(self, file_path: str) -> List[dict]:
        """
        使用 git log 取得檔案的 commit 記錄
        
        Args:
            file_path: 檔案路徑
            
        Returns:
            commit 記錄列表
        """
        try:
            # 建構 git log 命令
            cmd = [
                'git', 'log', 
                '--follow',  # 追蹤檔案重新命名
                '--format=%H|%an|%ad|%s',  # hash|author|date|subject
                '--date=iso',
                '--',
                file_path
            ]
            
            print(f"🔍 執行 Git 命令: {' '.join(cmd)}")
            print(f"📁 工作目錄: {self._repo_path}")
            print(f"📄 檔案路徑: {file_path}")
            
            # 檢查檔案是否存在於工作目錄中
            full_file_path = self._repo_path / file_path
            print(f"🔍 完整檔案路徑: {full_file_path}")
            print(f"📁 檔案是否存在: {full_file_path.exists()}")
            
            # 執行命令
            result = subprocess.run(
                cmd,
                cwd=self._repo_path,
                capture_output=True,
                text=True,
                encoding='utf-8'
            )
            
            if result.returncode != 0:
                print("❌ Git 命令執行失敗:")
                print(f"   返回碼: {result.returncode}")
                print(f"   錯誤輸出: {result.stderr}")
                print(f"   標準輸出: {result.stdout}")
                return []
            
            # 解析輸出
            commits = []
            lines = result.stdout.strip().split('\n')
            
            for line in lines:
                if line.strip():
                    parts = line.split('|', 3)
                    if len(parts) >= 4:
                        commit = {
                            'hash': parts[0],
                            'author': parts[1],
                            'date': parts[2],
                            'message': parts[3]
                        }
                        commits.append(commit)
            
            return commits
            
        except Exception as e:
            print(f"❌ 執行 git log 失敗: {e}")
            return []
    
    def _extract_issue_numbers_from_commits(self, commits: List[dict], pattern: str = r"refs\s+#(\d+)") -> Set[str]:
        """
        從 commit 訊息中提取 issue 編號
        
        Args:
            commits: commit 記錄列表
            pattern: 正規表達式模式
            
        Returns:
            issue 編號集合
        """
        issue_numbers = set()
        regex = re.compile(pattern, re.IGNORECASE)
        
        for commit in commits:
            message = commit.get('message', '')
            matches = regex.findall(message)
            issue_numbers.update(matches)
        
        return issue_numbers


class GitService:
    """Git 服務主類別"""
    
    def __init__(self, repo_path: str = "."):
        """
        初始化 Git 服務
        
        Args:
            repo_path: Git 儲存庫路徑
        """
        self._extractor = GitHistoryExtractor(repo_path)
    
    def get_issue_numbers_from_file(self, file_path: str) -> str:
        """
        從檔案的 git history 取得 issue 編號字串
        
        Args:
            file_path: 檔案路徑
            
        Returns:
            逗號分隔的 issue 編號字串
        """
        return self._extractor.extract_issue_numbers_from_file(file_path)
    
    def get_file_history(self, file_path: str) -> List[GitCommit]:
        """
        取得檔案的完整 git history
        
        Args:
            file_path: 檔案路徑
            
        Returns:
            GitCommit 物件列表
        """
        return self._extractor.get_file_commit_history(file_path)
    
    def is_git_repository(self) -> bool:
        """
        檢查是否為 git 儲存庫
        
        Returns:
            是否為 git 儲存庫
        """
        try:
            result = subprocess.run(
                ['git', 'rev-parse', '--git-dir'],
                cwd=self._extractor._repo_path,
                capture_output=True,
                text=True
            )
            return result.returncode == 0
        except Exception:
            return False
