# Generated by Copilot
"""
Git History Issue 編號提取工具 - 靜默版
只回傳符合 refs #編號 格式的 issue 編號字串，不顯示調試信息
"""
import subprocess
import re
from pathlib import Path
from typing import Set, List


class SilentGitExtractor:
    """靜默的 Git issue 編號提取器"""
    
    def __init__(self, repo_path: str = "."):
        """初始化提取器"""
        self._repo_path = Path(repo_path).resolve()
    
    def extract_issue_numbers(self, file_path: str) -> str:
        """
        從檔案的 git history 中提取 issue 編號
        
        Args:
            file_path: 檔案路徑
            
        Returns:
            逗號分隔的 issue 編號字串
        """
        try:
            commits = self._get_file_commits(file_path)
            issue_numbers = self._extract_numbers_from_commits(commits)
            return ",".join(sorted(issue_numbers))
        except Exception:
            return ""
    
    def _get_file_commits(self, file_path: str) -> List[dict]:
        """取得檔案的 commit 記錄（靜默模式）"""
        try:
            cmd = [
                'git', 'log', 
                '--follow',
                '--format=%H|%an|%ad|%s',
                '--date=iso',
                '--',
                file_path
            ]
            
            result = subprocess.run(
                cmd,
                cwd=self._repo_path,
                capture_output=True,
                text=True,
                encoding='utf-8'
            )
            
            if result.returncode != 0:
                return []
            
            commits = []
            lines = result.stdout.strip().split('\n')
            
            for line in lines:
                if line.strip():
                    parts = line.split('|', 3)
                    if len(parts) >= 4:
                        commit = {
                            'hash': parts[0],
                            'author': parts[1],
                            'date': parts[2],
                            'message': parts[3]
                        }
                        commits.append(commit)
            
            return commits
            
        except Exception:
            return []
    
    def _extract_numbers_from_commits(self, commits: List[dict]) -> Set[str]:
        """從 commit 訊息中提取 issue 編號"""
        issue_numbers = set()
        pattern = r"refs\s+#(\d+)"
        regex = re.compile(pattern, re.IGNORECASE)
        
        for commit in commits:
            message = commit.get('message', '')
            matches = regex.findall(message)
            issue_numbers.update(matches)
        
        return issue_numbers
    
    def is_git_repository(self) -> bool:
        """檢查是否為 git 儲存庫"""
        try:
            result = subprocess.run(
                ['git', 'rev-parse', '--git-dir'],
                cwd=self._repo_path,
                capture_output=True,
                text=True
            )
            return result.returncode == 0
        except Exception:
            return False


def print_simple_header():
    """顯示簡化的工具標題"""
    print("=" * 50)
    print("     Git History Issue 編號提取")
    print("=" * 50)
    print("提取符合 'refs #編號' 格式的 issue 編號")
    print()


def get_repo_path():
    """取得儲存庫路徑"""
    print("請輸入 Git 儲存庫路徑 (或按 Enter 使用當前目錄):")
    user_input = input("> ").strip()
    
    if not user_input:
        user_input = "."
    
    if not Path(user_input).exists():
        print(f"❌ 路徑不存在: {user_input}")
        return None
    
    extractor = SilentGitExtractor(user_input)
    if not extractor.is_git_repository():
        print(f"❌ 不是 Git 儲存庫: {user_input}")
        return None
    
    return str(Path(user_input).resolve())


def get_file_path():
    """取得檔案路徑"""
    print("\n請輸入檔案路徑 (相對於儲存庫根目錄):")
    print("例如: src/main.py 或 Controllers/ProductController.cs")
    file_path = input("> ").strip()
    
    if not file_path:
        print("❌ 檔案路徑不能為空")
        return None
    
    return file_path


def extract_cli(repo_path=None):
    """互動 CLI 版：保留原有互動流程"""
    try:
        print_simple_header()

        # 取得儲存庫路徑
        if repo_path is None:
            repo_path = get_repo_path()
        if not repo_path:
            return

        extractor = SilentGitExtractor(repo_path)
        print(f"✅ Git 儲存庫: {repo_path}")

        while True:
            # 取得檔案路徑
            file_path = get_file_path()
            if not file_path:
                continue

            # 提取 issue 編號
            print(f"\n🔍 分析檔案: {file_path}")
            issue_numbers = extractor.extract_issue_numbers(file_path)

            # 只顯示結果
            if issue_numbers:
                print(f"📋 Issue 編號: {issue_numbers}")
            else:
                print("📋 未找到符合格式的 issue 編號")

            # 詢問是否繼續
            print("\n" + "-" * 30)
            continue_choice = input("繼續分析其他檔案？(y/n): ").strip().lower()
            if continue_choice not in ['y', 'yes', '']:
                break

        print("\n👋 完成！")

    except KeyboardInterrupt:
        print("\n\n⚠️ 用戶中斷操作")
    except Exception as e:
        print(f"\n❌ 程式執行錯誤: {e}")
    finally:
        input("\n按 Enter 鍵結束...")


def main(pause_on_exit=True):
    """非互動主程式入口，供被匯入呼叫。若 pause_on_exit=True，最後會要求按鍵結束以保留視窗（原行為）。"""
    try:
        print_simple_header()
        repo_path = get_repo_path()
        if not repo_path:
            return False

        extractor = SilentGitExtractor(repo_path)
        print(f"✅ Git 儲存庫: {repo_path}")

        while True:
            file_path = get_file_path()
            if not file_path:
                continue

            print(f"\n🔍 分析檔案: {file_path}")
            issue_numbers = extractor.extract_issue_numbers(file_path)

            if issue_numbers:
                print(f"📋 Issue 編號: {issue_numbers}")
            else:
                print("📋 未找到符合格式的 issue 編號")

            print("\n" + "-" * 30)
            continue_choice = input("繼續分析其他檔案？(y/n): ").strip().lower()
            if continue_choice not in ['y', 'yes', '']:
                break

        print("\n👋 完成！")
        return True

    except KeyboardInterrupt:
        print("\n\n⚠️ 用戶中斷操作")
        return False
    except Exception as e:
        print(f"\n❌ 程式執行錯誤: {e}")
        return False
    finally:
        if pause_on_exit:
            try:
                input("\n按 Enter 鍵結束...")
            except Exception:
                pass


if __name__ == "__main__":
    main()
